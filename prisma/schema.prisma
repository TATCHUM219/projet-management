// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String       @id @default(uuid())
  name         String
  email        String       @unique
  role         String       @default("USER") 
  tasks        Task[]
  createdTasks Task[]       @relation("CreatedTasks")
  projects     Project[]    @relation("UserProjects")
  userProjects ProjectUser[]
  projetsChef  Project[]    @relation("ChefDeProjet")
}

model Project {
  id          String       @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  tasks       Task[]
  inviteCode  String       @unique
  inviteCodeChef String?    @unique
  inviteCodeMembre String? @unique
  createdById String
  createdBy   User         @relation("UserProjects", fields: [createdById], references: [id])
  chefDeProjetId String?
  chefDeProjet   User?     @relation("ChefDeProjet", fields: [chefDeProjetId], references: [id])
  users       ProjectUser[]
  resources   Resource[]   // back-relation
  costs       Cost[]       // back-relation
}

model Task {
  id                  String   @id @default(uuid())
  name                String
  description         String
  status              String   @default("To Do")
  dueDate             DateTime?
  projectId           String
  project             Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user                User?    @relation(fields: [userId], references: [id])
  userId              String?
  createdById         String
  createdBy           User     @relation("CreatedTasks", fields: [createdById], references: [id])
  solutionDescription String?
  taskResources       TaskResource[] // back-relation
}

model ProjectUser {
  id        String   @id @default(uuid())
  userId    String
  projectId String
  user      User     @relation(fields: [userId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  @@unique([userId, projectId])
}

model Resource {
  id        String   @id @default(uuid())
  name      String
  type      String   // "HUMAN" ou "MATERIAL"
  cost      Float    // coût horaire ou unitaire
  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
  taskResources TaskResource[] // back-relation
}

model TaskResource {
  id         String   @id @default(uuid())
  task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId     String
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String
  quantity   Float?   // nombre d'heures ou quantité utilisée
}

model Cost {
  id        String   @id @default(uuid())
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  budget    Float
  spent     Float
  updatedAt DateTime @updatedAt
}
